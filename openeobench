#!/usr/bin/python3

# Import the functions from openeo_checker.py
from openeo_checker import (
    process_single_url, 
    process_csv, 
    calculate_statistics_flexible,
    run_openeo_scenario,  # Used in run command
    run_summary_task  # Used in run-summary command
)

import sys
import os
import argparse

# Add the current directory to the Python path so we can import openeo-checker
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

import datetime

def main():
    parser = argparse.ArgumentParser(
        description='OpenEO Bench - Benchmarking and testing tool for OpenEO endpoints',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Check endpoints from CSV file
  openeobench service -i endpoints.csv -o results/
  
  # Check a single URL
  openeobench service -u https://openeo.example.com/.well-known/openeo -o results/
  
  # Run OpenEO scenario on a backend
  openeobench run --api-url https://openeo.example.com -i scenario.json -o results/
  
  # Generate timing summary from run results
  openeobench run-summary -i output/folder1 output/folder2 -o timing_summary.csv
  
  # Generate statistics summary from folder (CSV output)
  openeobench service-summary -i results/ -o summary.csv
  
  # Generate statistics summary from folder (Markdown output)
  openeobench service-summary -i results/ -o summary.md
  
  # Generate statistics from single CSV file
  openeobench service-summary -i results/2025-06-26.csv -o summary.md
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Service command (equivalent to check)
    service_parser = subparsers.add_parser('service', help='Check OpenEO service endpoints')
    service_group = service_parser.add_mutually_exclusive_group(required=True)
    service_group.add_argument('-i', '--input', help='Input CSV file with URL column')
    service_group.add_argument('-u', '--url', help='Single URL to test')
    service_parser.add_argument('-o', '--output', required=True, help='Output directory to write results')
    service_parser.add_argument('-n', '--name', help='Backend name for single URL (optional, defaults to hostname)')
    
    # Run command (equivalent to openeotest run, but with renamed --scenario to --input)
    run_parser = subparsers.add_parser('run', help='Run OpenEO scenarios on backends')
    run_parser.add_argument('--api-url', required=True, help='URL of the OpenEO backend')
    run_parser.add_argument('-i', '--input', required=True, help='Path to the process graph JSON file (scenario)')
    run_parser.add_argument('-o', '--output', help='Output directory for results (optional)')
    
    # Run Summary command (equivalent to openeotest summarize)
    run_summary_parser = subparsers.add_parser('run-summary', help='Generate timing summary from OpenEO run results')
    run_summary_parser.add_argument('-i', '--input', required=True, nargs='+', help='List of result folders or files')
    run_summary_parser.add_argument('-o', '--output', required=True, help='Output CSV file')
    
    # Service Summary command (equivalent to stats)
    summary_parser = subparsers.add_parser('service-summary', help='Generate statistics summary from service check results')
    summary_parser.add_argument('-i', '--input', required=True, help='Input folder containing CSV files or a single CSV file')
    summary_parser.add_argument('-o', '--output', required=True, help='Output file (.csv or .md) to write statistics results')

    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    if args.command == 'service':
        # Check if output directory exists, create it if it doesn't
        output_dir = args.output
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        # Get date in YYYY-MM-DD format
        date = datetime.datetime.now().strftime("%Y-%m-%d")
        
        if args.url:
            # Single URL mode
            output_csv = os.path.join(output_dir, f"{date}_single.csv")
            process_single_url(args.url, args.name, output_csv)
        else:
            # CSV file mode
            output_csv = os.path.join(output_dir, f"{date}.csv")
            process_csv(args.input, output_csv)
    
    elif args.command == 'run':
        # Run OpenEO scenario
        result = run_openeo_scenario(args.api_url, args.input, args.output)
        if result is None:
            return 1
        else:
            print(f"Scenario completed with status: {result.get('status', 'unknown')}")
            if result.get('status') == 'completed':
                print(f"Results saved to: {result.get('file_path', 'unknown location')}")
    
    elif args.command == 'run-summary':
        # Generate run summary from OpenEO result folders/files
        success = run_summary_task(args.input, args.output)
        if not success:
            return 1
    
    elif args.command == 'service-summary':
        # Validate that the input path exists
        if not os.path.exists(args.input):
            print(f"Error: Input path '{args.input}' does not exist")
            return 1
        
        # Calculate statistics and write to file
        success = calculate_statistics_flexible(args.input, args.output)
        if not success:
            return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
